syntax on
set number
set showmatch
set tw:1337
set hls is
set showcmd
set autoread 
set incsearch
set shiftwidth=2
set softtabstop=2
set backspace=2
set expandtab
set autoindent
set smartindent
set smarttab
set encoding=utf-8
set nocompatible      " We're running Vim, not Vi!

" True colors in vim
set termguicolors
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"

" mouse support
set mouse=a
" mouse support on more than 220 cols
if !has('nvim')
  set ttymouse=sgr
endif

" Persistent undo !
set undofile                 "turn on the feature  
set undodir=$HOME/.vim/undo  "directory where the undo files will be stored.

" colorecting colorscheme
" set t_Co=256
set clipboard=unnamed

"folding
set foldmethod=syntax   
set foldnestmax=10
" set nofoldenable
set foldlevel=100
nnoremap <Space> za

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell spelllang=fr
autocmd Filetype markdown hi SpellBad cterm=underline ctermfg=red

nnoremap <F5> :ALEFix<CR>
nnoremap <F6> :lw<CR>
nnoremap <F7> :lcl<CR>
nnoremap <F8> :call LanguageClient_contextMenu()<CR>

inoremap III <Esc>I
inoremap AAA <Esc>A
inoremap OOO <Esc>o

nnoremap <D-s> :w<cr>
inoremap <D-s> <Esc>:w<cr>i

nnoremap ¬      :tabnext<CR>
nnoremap ˙      :tabprevious<CR>
nnoremap <C-t>  :tabnew<CR> 
inoremap ¬      <Esc>:tabnext<CR>i
inoremap ˙      <Esc>:tabprevious<CR>i
inoremap <C-t>  <Esc>:tabnew<CR>

if has('nvim')
  if empty(glob('~/.local/share/nvim/site/autoload/plug.vim'))
    silent !curl -fLo ~/.local/share/nvim/site/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
else
  if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
          \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
  endif
endif

let g:ale_disable_lsp = 1

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'vim-ruby/vim-ruby'
Plug 'tpope/vim-rails'
Plug 'mhinz/vim-signify'
Plug 'thoughtbot/vim-rspec'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'docunext/closetag.vim'
Plug 'easymotion/vim-easymotion'
Plug 'lifepillar/vim-solarized8'
Plug 'rking/ag.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'rizzatti/funcoo.vim'
Plug 'rizzatti/dash.vim'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'mileszs/ack.vim'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dhruvasagar/vim-zoom'
Plug 'mechatroner/rainbow_csv'
Plug 'kshenoy/vim-signature'
Plug 'rhysd/vim-grammarous'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'styled-components/vim-styled-components', { 'branch': 'main' }
Plug 'hail2u/vim-css3-syntax'
Plug 'meain/vim-package-info', {'do': 'npm install' }
Plug 'joker1007/vim-ruby-heredoc-syntax'
" Plug 'dense-analysis/ale'
Plug 'kevinoid/vim-jsonc'
Plug 'HerringtonDarkholme/yats.vim'
Plug 'rust-lang/rust.vim'

call plug#end()

let g:rustfmt_autosave = 1

set rtp+=/usr/local/opt/fzf

" Vim import auto
" Must only run in nvim
" if has('nvim')
"   augroup import_cost_auto_run
"     autocmd!
"     autocmd InsertLeave *.js,*.jsx,*.ts,*.tsx ImportCost
"     autocmd BufEnter *.js,*.jsx,*.ts,*.tsx ImportCost
"     autocmd CursorHold *.js,*.jsx,*.ts,*.tsx ImportCost
"   augroup END
" endif

" ########################### START coc CONFIG ###############################
" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c
" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)
" Remap for format selected region
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Create mappings for function text object, requires document symbols feature of languageserver.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <C-d> for select selections ranges, needs server support, like: coc-tsserver, coc-python
nmap <silent> <C-d> <Plug>(coc-range-select)
xmap <silent> <C-d> <Plug>(coc-range-select)

" Use `:Format` to format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` to fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" use `:OR` for organize import of current buffer
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add status line support, for integration with other plugin, checkout `:h coc-status`
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
" ########################### END coc CONFIG ###############################

" fzf mappings
nmap ; :Buffers<CR>
silent! !git rev-parse --is-inside-work-tree
if v:shell_error == 0
  nmap <Leader>e :GFiles --cached --others --exclude-standard<CR>
else
  nmap <Leader>e :Files<CR>
endif
nmap <Leader>r :Tags<CR>

" movement mappings
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-L> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-K> :TmuxNavigateDown<cr>
nnoremap <silent> <C-J> :TmuxNavigateUp<cr>
nnoremap <silent> <C-H> :TmuxNavigateRight<cr>

" set wildmode=list:longest,list:full

set laststatus=2
let g:airline_powerline_fonts = 1

set background=dark " dark | light "
colorscheme solarized8

let g:grammarous#default_comments_only_filetypes = {
      \ '*' : 1, 'help' : 0, 'markdown' : 0,
      \ }
set regexpengine=1

let g:gitgutter_signs = 0

let g:javascript_plugin_flow = 1

" let g:LanguageClient_serverCommands = {
"     \ 'javascript': ['flow-language-server', '--stdio'],
"     \ 'javascript.jsx': ['flow-language-server', '--stdio'],
"     \ 'ruby': ['solargraph','stdio']
"     \ }

let g:used_javascript_libs = 'jquery,underscore'

" let g:coc_global_extensions = [
"   \ 'coc-snippets',
"   \ 'coc-pairs',
"   \ 'coc-eslint', 
"   \ 'coc-prettier', 
"   \ 'coc-json', 
"   \ 'coc-css', 
"   \ 'coc-html', 
"   \ 'coc-solargraph',
"   \ 'coc-yaml',
"   \ 'coc-flow',
"   \ 'coc-tsserver ',
"   \ 'coc-tailwindcss',
"   \ 'coc-python',
"   \ 'coc-marketplace', 
"   \ 'coc-webpack', 
"   \ 'coc-rls', 
"   \ 'coc-ultisnips',
"   \ 'coc-emoji',
"   \ 'coc-docker',
"   \ ]

let g:ale_fixers = {}
let g:ale_fixers['ruby'] = ['rubocop', 'prettier']
let g:ale_fixers['rake'] = ['rubocop', 'prettier']
let g:ale_fixers['json'] = ['prettier']
let g:ale_fixers['jsonc'] = ['prettier']
let g:ale_fixers['javascript'] = ['eslint']
let g:ale_fixers['javascriptreact'] = ['eslint']
let g:ale_fixers['typescript'] = ['eslint']
let g:ale_fixers['typescriptreact'] = ['eslint']
" let g:ale_fixers['json'] = ['prettier']
" let g:ale_fixers['tex'] = ['textlint']
" let g:ale_fixers['markdown'] = ['prettier']
let g:ale_fix_on_save = 1
let g:ale_ruby_rubocop_executable = 'bundle'

command! -nargs=0 Prettier :call CocAction('runCommand', 'prettier.formatFile')

if has('nvim')
  if filereadable($HOME . "/.nvimrc.local")
    source $HOME/.nvimrc.local
  endif
else
  if filereadable($HOME . "/.vimrc.local")
    source $HOME/.vimrc.local
  endif
endif

" Run jest for current project
command! -nargs=0 Jest :call  CocAction('runCommand', 'jest.projectTest')

" Run jest for current file
command! -nargs=0 JestCurrent :call  CocAction('runCommand', 'jest.fileTest', ['%'])

" Run jest for current test
nnoremap <leader>te :call CocAction('runCommand', 'jest.singleTest')<CR>

" Init jest in current cwd, require global jest command exists
command! JestInit :call CocAction('runCommand', 'jest.init')

set re=0
